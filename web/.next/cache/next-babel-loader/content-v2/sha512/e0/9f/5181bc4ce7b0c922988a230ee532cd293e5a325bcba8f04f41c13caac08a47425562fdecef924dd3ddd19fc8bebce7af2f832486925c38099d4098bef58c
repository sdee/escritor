{"ast":null,"code":"import _regeneratorRuntime from \"/Users/sutee.dee/src/escritor/web/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/sutee.dee/src/escritor/web/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/sutee.dee/src/escritor/web/pages/blog/[...slug].js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useRouter } from \"next/router\";\nimport client from \"../../../client\";\n\nvar BlockContent = require(\"@sanity/block-content-to-react\");\n\nvar Post = function Post(props) {\n  _s();\n\n  var router = useRouter();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: router.query.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(BlockContent, {\n      blocks: body\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true);\n};\n\n_s(Post, \"fN7XvhJ+p5oE6+Xlo0NJmXpxjC8=\", false, function () {\n  return [useRouter];\n});\n\n_c = Post;\n\nPost.getInitialProps = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(context) {\n    var _context$query$slug, slug;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // It's important to default the slug so that it doesn't return \"undefined\"\n            _context$query$slug = context.query.slug, slug = _context$query$slug === void 0 ? [] : _context$query$slug;\n            slug = slug[0];\n            _context.next = 4;\n            return client.fetch(\"\\n      *[_type == \\\"post\\\"][0]{body}\\n    \", {\n              slug: slug\n            });\n\n          case 4:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default Post;\n\nvar _c;\n\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"sources":["/Users/sutee.dee/src/escritor/web/pages/blog/[...slug].js"],"names":["useRouter","client","BlockContent","require","Post","props","router","query","title","body","getInitialProps","context","slug","fetch"],"mappings":";;;;;;;;;AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA,OAAOC,MAAP,MAAmB,iBAAnB;;AACA,IAAMC,YAAY,GAAGC,OAAO,CAAC,gCAAD,CAA5B;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAACC,KAAD,EAAW;AAAA;;AACtB,MAAMC,MAAM,GAAGN,SAAS,EAAxB;AACA,sBACE;AAAA,4BACE;AAAA,gBAAKM,MAAM,CAACC,KAAP,CAAaC;AAAlB;AAAA;AAAA;AAAA;AAAA,aADF,eAEE,QAAC,YAAD;AAAc,MAAA,MAAM,EAAEC;AAAtB;AAAA;AAAA;AAAA;AAAA,aAFF;AAAA,kBADF;AAMD,CARD;;GAAML,I;UACWJ,S;;;KADXI,I;;AAUNA,IAAI,CAACM,eAAL;AAAA,sEAAuB,iBAAgBC,OAAhB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACrB;AADqB,kCAEDA,OAAO,CAACJ,KAFP,CAEfK,IAFe,EAEfA,IAFe,oCAER,EAFQ;AAGrBA,YAAAA,IAAI,GAAGA,IAAI,CAAC,CAAD,CAAX;AAHqB;AAAA,mBAIRX,MAAM,CAACY,KAAP,gDAIX;AAAED,cAAAA,IAAI,EAAJA;AAAF,aAJW,CAJQ;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAvB;;AAAA;AAAA;AAAA;AAAA;;AAYA,eAAeR,IAAf","sourcesContent":["import { useRouter } from \"next/router\";\nimport client from \"../../../client\";\nconst BlockContent = require(\"@sanity/block-content-to-react\");\n\nconst Post = (props) => {\n  const router = useRouter();\n  return (\n    <>\n      <h2>{router.query.title}</h2>\n      <BlockContent blocks={body}></BlockContent>\n    </>\n  );\n};\n\nPost.getInitialProps = async function (context) {\n  // It's important to default the slug so that it doesn't return \"undefined\"\n  let { slug = [] } = context.query;\n  slug = slug[0]\n  return await client.fetch(\n    `\n      *[_type == \"post\"][0]{body}\n    `,\n    { slug}\n  );\n};\n\nexport default Post;\n"]},"metadata":{},"sourceType":"module"}